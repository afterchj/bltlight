<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd">


    <!--第二种方式：加载一个properties文件-->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:setup.production.properties"/>
    </bean>


    <!-- 第三种方式：加载多个properties文件
    <bean id="configProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="locations">
            <list>
                <value>classpath:jdbc.properties</value>
                <value>classpath:common.properties</value>
            </list>
        </property>
        <property name="fileEncoding" value="UTF-8"/>
    </bean>
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
        <property name="properties" ref="configProperties"/>
    </bean>
    -->
    <!-- 开启注解模式 -->
    <context:component-scan base-package="com.tpadsz.after"/>


    <!--&lt;!&ndash;应用名称&ndash;&gt;-->
    <!--<dubbo:application name="hello-world"/>-->

    <!--&lt;!&ndash; 使用zookeeper注册中心暴露服务地址 &ndash;&gt;-->
    <!--<dubbo:registry address="zookeeper://10.10.11.81:2181"/>-->
    <!--&lt;!&ndash; 指定传输层通信协议 &ndash;&gt;-->
    <!--<dubbo:protocol name="dubbo" port="20880"/>-->
    <!--<dubbo:protocol name="rmi" port="1099"/>-->

    <dubbo:application name="${dubbo.application.name}"
                       owner="${dubbo.application.owner}" />

    <dubbo:registry protocol="zookeeper" address="${dubbo.registry.address}" />

    <!-- <dubbo:protocol name="dubbo" port="${dubbo.protocol.port}" dispatcher="all"
        host="192.168.16.44" threadpool="fixed" threads="100" accepts="1000" /> -->
    <dubbo:protocol name="dubbo" port="${dubbo.protocol.port}" dispatcher="all" threadpool="fixed" threads="300" accepts="1000" />

    <!-- 业务发布 -->
    <dubbo:monitor protocol="registry"/>
    <!-- 接口的位置 -->
    <dubbo:service loadbalance="random" version="0.1.0"
                   cluster="failover" retries="2" interface="com.tpadsz.after.api.RecordBillService"
                   ref="recordBillService" timeout="3000"/>

    <!--<dubbo:service interface="com.tpadsz.after.api.RecordBillService" ref="recordBillService" protocol="dubbo,rmi" version="0.1.0"/>-->


    <!-- 阿里 druid数据库连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <!-- 数据库基本信息配置 -->
        <property name="url" value="${jdbcUrl}"/>
        <property name="username" value="${username}"/>
        <property name="password" value="${password}"/>
        <!-- 最大并发连接数 -->
        <property name="maxActive" value="${maxActive}"/>
        <!-- 初始化连接数量 -->
        <property name="initialSize" value="${initialSize}"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${maxWait}"/>
        <!-- 最小空闲连接数 -->
        <property name="minIdle" value="${minIdle}"/>
        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>

    </bean>
    <!-- JDBC 事务管理器, 在service层面上实现事务管理 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED" isolation="DEFAULT"/>
            <tx:method name="update*" propagation="REQUIRED" isolation="DEFAULT"/>
            <tx:method name="delete*" propagation="REQUIRED" isolation="DEFAULT"/>
            <tx:method name="batch*" propagation="REQUIRED" isolation="DEFAULT"/>
            <tx:method name="select*" propagation="REQUIRED" isolation="DEFAULT" read-only="true"/>
            <tx:method name="load*" propagation="REQUIRED" isolation="DEFAULT" read-only="true"/>
            <tx:method name="get*" propagation="REQUIRED" isolation="DEFAULT" read-only="true"/>
            <tx:method name="find*" propagation="REQUIRED" isolation="DEFAULT" read-only="true"/>
            <!-- 剩下的其他方法. -->
            <tx:method name="*" propagation="REQUIRED" isolation="DEFAULT"/>
        </tx:attributes>
    </tx:advice>

    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!-- 事物处理 -->
    <aop:config>
        <!--目录结构，该目录下类注解：@Service("xxxService")-->
        <aop:pointcut id="pc" expression="execution(* com.tpadsz.after.service..*(..))"/>
        <aop:advisor pointcut-ref="pc" advice-ref="txAdvice"/>
    </aop:config>

    <!-- mybatis配置 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="typeAliasesPackage" value="com.tpadsz.after.entity"></property>
        <property name="configLocation" value="classpath:mybatisConfig.xml"></property>
        <!-- mapper扫描 -->
        <property name="mapperLocations" value="classpath:mybatis/*.xml"></property>
    </bean>

    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.tpadsz.after.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!--<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"-->
    <!--p:sqlSessionFactoryBeanName="sqlSessionFactory" -->
    <!--p:basePackage="com.tpadsz.after.dao"/>-->

    <!--<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">-->
    <!--<constructor-arg ref="sqlSessionFactory"/>-->
    <!--</bean>-->
</beans>